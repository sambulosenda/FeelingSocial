type Like @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID! @index(name: "byPost", queryField: "likesForPostByUser", sortKeyFields: ["userID"])
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Comment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  comment: String!
  createdAt: AWSDateTime!
  userID: ID! @index(name: "byUser")
  postID: ID! @index(name: "byPost", queryField: "commentsByPost", sortKeyFields: ["createdAt"])
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post @model @auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime
  type: String! @index(name: "postByDate", queryField: "postByDate", sortKeyFields: ["createdAt"])
  description: String!
  image: String
  video: String
  nofComments: Int!
  nofLikes: Int!
  userID: ID! @index(name: "byUser")
  User: User @belongsTo(fields: ["userID"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  email: String!
  bio: String
  username: String @index(name: "usersByUsername", queryField: "usersByUsername")
  website: AWSURL
  nofPosts: Int!
  nofFollowers: Int!
  nofFollowing: Int!
  image: String
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])
}


type UserFeedPost @model @auth(rules: [{allow: owner}]) {
  id: ID!

  userID: ID! @index(name: "byUser", sortKeyFields: ["postCreatedAt"], queryField: "userFeed")

  postID: ID! @index(name: "byPost")
  postCreatedAt: AWSDateTime!
  postOwnerID: ID! @index(name: "byPostOwner")

  Post: Post @hasOne(fields: ["postID"])
}
Footer
